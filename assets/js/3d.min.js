const windowWidth=window.innerWidth,scene=new THREE.Scene;scene.background=null;const camera=new THREE.PerspectiveCamera(45,1,.1,1e3),renderer=new THREE.WebGLRenderer({antialias:!0,alpha:!0}),_3drenderspace=document.querySelector("._3drenderspace");var _3drenderspace_boxSize=_3drenderspace.getAttribute("data-wd"),_3drenderspace_boxSize_for_smallWindow=_3drenderspace.getAttribute("data-wd-sm");windowWidth<500?_3drenderspace_boxSize?renderer.setSize(_3drenderspace_boxSize_for_smallWindow,_3drenderspace_boxSize_for_smallWindow):renderer.setSize(windowWidth,windowWidth):_3drenderspace_boxSize?renderer.setSize(_3drenderspace_boxSize,_3drenderspace_boxSize):renderer.setSize(500,500),_3drenderspace.appendChild(renderer.domElement);const ambientLight=new THREE.AmbientLight(16777215,.1);scene.add(ambientLight);const directionalLight1=new THREE.DirectionalLight(5532415,1);directionalLight1.position.set(5,5,5).normalize(),scene.add(directionalLight1);const directionalLight2=new THREE.DirectionalLight(16729088,1);let model;directionalLight2.position.set(-5,5,-5).normalize(),scene.add(directionalLight2);const pivot=new THREE.Object3D;scene.add(pivot);const loader=new THREE.GLTFLoader;var dracoLoader=new THREE.DRACOLoader;function adjustModelAndCamera(e){const t=(new THREE.Box3).setFromObject(e),n=new THREE.Vector3;t.getSize(n);const o=new THREE.Sphere;t.getBoundingSphere(o);const r=Math.max(n.x,n.y,n.z),d=.01*Math.min(renderer.domElement.width,renderer.domElement.height)/r;e.scale.set(d,d,d);const i=1.5*o.radius;camera.position.set(0,0,i),camera.lookAt(0,0,0)}dracoLoader.setDecoderPath("https://www.gstatic.com/draco/v1/decoders/"),loader.setDRACOLoader(dracoLoader),loader.load("https://cdn.jsdelivr.net/gh/StaticUser123/prtflo@main/import.glb",(function(e){model=e.scene,model.traverse((e=>{e.isMesh&&(e.material=new THREE.MeshStandardMaterial({color:16777215,roughness:.8,metalness:.2}))})),pivot.add(model),model.position.set(0,0,0),adjustModelAndCamera(model)}),void 0,(function(e){console.error("Error loading model:",e)}));let mouseX=0,mouseY=0,lastMouseMoveTime=Date.now(),interactionsEnabled=windowWidth>=500;function setInteractionsEnabled(e){interactionsEnabled=e,e?(document.addEventListener("mousemove",handleMouseMove),document.addEventListener("touchmove",handleTouchMove),document.addEventListener("wheel",preventScroll)):(document.removeEventListener("mousemove",handleMouseMove),document.removeEventListener("touchmove",handleTouchMove),document.removeEventListener("wheel",preventScroll),mouseX=0,mouseY=0,lastMouseMoveTime=Date.now())}function handleMouseMove(e){const t=renderer.domElement.width/2,n=renderer.domElement.height/2;mouseX=(e.clientX-t)/t,mouseY=(e.clientY-n)/n,lastMouseMoveTime=Date.now()}function handleTouchMove(e){if(1===e.touches.length){const t=e.touches[0],n=renderer.domElement.getBoundingClientRect(),o=n.width/2,r=n.height/2;mouseX=(t.clientX-n.left-o)/o,mouseY=(t.clientY-n.top-r)/r,lastMouseMoveTime=Date.now()}}function preventScroll(e){e.preventDefault()}function animate(){requestAnimationFrame(animate);const e=Date.now();model&&((e-lastMouseMoveTime>100||!interactionsEnabled)&&(model.rotation.y+=.002,model.rotation.x+=.005),interactionsEnabled&&(pivot.rotation.y=mouseX*Math.PI*.25,pivot.rotation.x=mouseY*Math.PI*.25)),renderer.render(scene,camera)}animate(),setInteractionsEnabled(windowWidth>=500),adjustModelAndCamera(model);